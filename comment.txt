async function nodeSelection() {
  const selection = figma.currentPage.selection;
  if (selection.length === 0) {
    figma.notify("No nodes selected!");
    return null;
  } else {
    const result = await Promise.all(
      selection.map(async (node) => {
        if (node && (node.type === "COMPONENT" || node.type === "INSTANCE")) {
          figma.notify("A component is selected!");
          const componentId = node.id;
          for (let i = 0; i < 5; i++) {
            const newInstance = await createComponentInstance(
              componentId,
              100,
              100
            );
            return newInstance?.children.map((child, index) => {
              console.log(
                `Child ${index + 1}: ${child.name} (Type: ${child.type})`
              );
              return child;
            });
          }
        } else {
          figma.notify("Please select a component or instance.");
          return null;
        }
      })
    );
    return result.flat(); // Flatten the array if you are getting nested arrays
  }
}

figma.ui.onmessage = async (msg) => {
  if (msg.type === "replace-text") {
      const result = await nodeSelection();
      console.log(result)
      console.log('result');

     // Check if result is null
     if (result !== null) {
       // Filter out null or undefined values and cast as SceneNode[]
       const children: SceneNode[] = result.filter(
         (child): child is SceneNode => !!child
       );

       if (children.length > 0) {
         // Process valid children
         children.forEach((childNode: SceneNode) => {
           console.log(`Child: ${childNode.name} (Type: ${childNode.type})`);
                    console.log(msg.newText)
        //      if (childNode.type === 'TEXT') {
        //          console.log(`Child: ${childNode}`);
        //         // modifyTextNode(childNode, msg.newText);
        //    }
            // Perform operations on each childNode here
         });
       } else {
         console.log("No valid child nodes returned.");
       }
     } else {
       console.log("nodeSelection returned null.");
     }
    // if (childNode) {
    //   await replaceText(msg.newText, msg.instanceValue, childNode);
    // }
  } 
};

 else if (msg.type === "upload-image") {
    // await replaceImage(imageName, newImageUrl);
    console.log(msg.imageBytes);
    console.log("Upload Image");
    //   const image = figma.createImage(new Uint8Array(msg.imageBytes));
    //   console.log(image);1
    //   modifyImage()\

    // const selection = figma.currentPage.selection;
    // if (selection.length === 0) {
    //   figma.notify("No nodes selected!");
    // } else {
    //   selection.forEach(async (node) => {
    //     if (node && (node.type === "COMPONENT" || node.type === "INSTANCE")) {
    //       figma.notify("A component is selected!");
    //       const componentId = node.id;
    //       for (let i = 0; i < msg.instanceValue; i++) {
    //         const newInstance = await createComponentInstance(
    //           componentId,
    //           100,
    //           100
    //         );
    //         newInstance?.children.forEach(async (child, index) => {
    //           console.log(
    //             `Child ${index + 1}: ${child.name} (Type: ${child.type})`
    //           );
    //           if (child.type === "RECTANGLE") {
    //             const rect = child as RectangleNode;

    //             // Check if the rectangle has image fills
    //             console.log(rect)
    //             if (rect.fills) {
    //               const fills = rect.fills as Paint[];

    //               // Find the first fill that is of type 'IMAGE'
    //               const imageFill = fills.find((fill) => fill.type === "IMAGE");

    //               if (imageFill) {
    //                 // Create a new image from the byte array
    //                 const newImage = figma.createImage(msg.imageBytes);

    //                 // Replace the old image fill with the new image
    //                 const newFills = [...fills];
    //                 const newImageFill = {
    //                   ...imageFill,
    //                   imageHash: newImage.hash,
    //                 };
    //                 newFills.splice(fills.indexOf(imageFill), 1, newImageFill);

    //                 // Apply the new fills to the rectangle
    //                 rect.fills = newFills;
    //               }
    //             }
    //           }
    //         });
    //       }
    //     } else {
    //       figma.notify("Please select a component or instance.");
    //     }
    //   });
    // }
  }

async function replaceText(
  newText: string,
  instanceValue: number,
  childNode: SceneNode
) {
  //   const childNode: SceneNode | null = await nodeSelection();
  console.log(childNode);
  if (childNode) {
    if (childNode.type === "TEXT") {
      modifyTextNode(childNode, newText);
    }
    if (childNode.type === "RECTANGLE") {
      console.log("rectangle");
    }
  }
}

// function modifyImage(imageNode: RectangleNode, imageBytes: Uint8Array) {
//   const rect = imageNode as RectangleNode;

//   // Check if the rectangle has image fills
//   if (rect.fills && rect.fills.length > 0) {
//     const fills = rect.fills as Paint[];

//     // Find the first fill that is of type 'IMAGE'
//     const imageFill = fills.find((fill) => fill.type === "IMAGE");

//     if (imageFill) {
//       // Create a new image from the byte array
//       const newImage = figma.createImage(imageBytes);

//       // Replace the old image fill with the new image
//       const newFills = [...fills];
//       const newImageFill = { ...imageFill, imageHash: newImage.hash };
//       newFills.splice(fills.indexOf(imageFill), 1, newImageFill);

//       // Apply the new fills to the rectangle
//       rect.fills = newFills;
//     }
//   }
// }

// async function replaceImage(imageName: string, newImageUrl: string) {
//   const imageNodes = figma.currentPage.findAll(
//     (node) => node.type === "RECTANGLE" && node.name === imageName
//   );

//   try {
//     const image = await figma.createImage();

//     for (const node of imageNodes) {
//       if (node.type === "RECTANGLE") {
//         node.fills = [
//           { type: "IMAGE", scaleMode: "FILL", imageHash: image.hash },
//         ];
//       }
//     }

//     figma.notify(`Replaced ${imageNodes.length} image elements`);
//   } catch (error) {
//     figma.notify("Error loading image: " + error);
//   }
// }

// Assume `imageBytes` contains the byte array of your image
// async function addImageToRectangle(imageBytes: Uint8Array) {
//   // Create an image object from the byte array
//   const image = figma.createImage(imageBytes);

//   // Create a new rectangle
//   const rect = figma.createRectangle();
//   rect.resize(200, 200); // Set size of the rectangle

//   // Apply the image as a fill to the rectangle
//   rect.fills = [
//     {
//       type: "IMAGE",
//       imageHash: image.hash,
//       scaleMode: "FILL",
//     },
//   ];

//   // Append the rectangle to the current page
//   figma.currentPage.appendChild(rect);

//   // Center the viewport on the new rectangle
//   figma.viewport.scrollAndZoomIntoView([rect]);
// }

// Example usage: Fetch an image from a URL and use it
// fetch("https://example.com/image.png") // Replace with your image URL
//   .then((response) => response.arrayBuffer())
//   .then((buffer) => {
//     const imageBytes = new Uint8Array(buffer);
//     addImageToRectangle(imageBytes);
//   })
//   .catch((error) => {
//     console.error("Error loading image:", error);
//   });

// Function to modify children of a component instance
// function modifyComponentChildren(instance: InstanceNode) {
//   console.log('Modifying children of instance:', instance.name);

//   // Iterate through all children of the instance
//   instance.children.forEach((child, index) => {
//     // Check the type of the child and modify accordingly
//     switch (child.type) {
//       case 'TEXT':
//         child.characters = `Modified Text ${index + 1}`;
//         console.log(`Modified text of child ${index + 1}`);
//         break;
//       case 'RECTANGLE':
//       case 'ELLIPSE':
//         if ('fills' in child) {
//           // Change the fill color to a random color
//           const r = Math.random() * 255;
//           const g = Math.random() * 255;
//           const b = Math.random() * 255;
//           child.fills = [{ type: 'SOLID', color: { r: r/255, g: g/255, b: b/255 } }];
//           console.log(`Changed color of child ${index + 1}`);
//         }
//         break;
//       case 'FRAME':
//       case 'GROUP':
//         // For frames or groups, we could recursively modify their children
//         // This is left as an exercise for more complex scenarios
//         console.log(`Child ${index + 1} is a ${child.type}. Skipping for now.`);
//         break;
//       default:
//         console.log(`Child ${index + 1} is of type ${child.type}. No modification applied.`);
//     }
//   });
// }
